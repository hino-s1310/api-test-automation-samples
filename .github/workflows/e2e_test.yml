name: E2E Tests

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  schedule:
    - cron: "0 18 * * *"
  workflow_dispatch:

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
    
    strategy:
      fail-fast: false
      matrix:
        node-version: ["20.x"]
        python-version: ["3.11"]
    
    defaults:
      run:
        working-directory: ./tests/e2e
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Setup uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "0.4.30"
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup UV cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Install Python dependencies
        run: |
          cd ../../
          uv sync
      
      - name: Install E2E test dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('tests/e2e/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install chromium --with-deps
      
      - name: Check if port 8000 is available
        run: |
          if lsof -i :8000 > /dev/null 2>&1; then
            echo "Port 8000 is already in use. Stopping existing process..."
            lsof -ti :8000 | xargs kill -9 || true
            sleep 2
          fi
      
      - name: Start API server in background
        run: |
          cd ../../
          export ENVIRONMENT=test
          export PYTHONPATH=/home/runner/work/api-test-automation-samples/api-test-automation-samples
          
          # „Éá„Éº„Çø„Éô„Éº„Çπ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
          mkdir -p data/uploads data/markdown
          
          # API„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï
          nohup uv run uvicorn src.api.main:app --host 0.0.0.0 --port 8000 > api_server.log 2>&1 &
          echo $! > api_server.pid
          
          # „Çµ„Éº„Éê„ÉºËµ∑Âãï„ÇíÂæÖÊ©ü
          sleep 15
          
          # „É≠„Ç∞„ÇíÁ¢∫Ë™ç
          echo "API server log:"
          cat api_server.log
        env:
          ENVIRONMENT: test
          PYTHONPATH: /home/runner/work/api-test-automation-samples/api-test-automation-samples
      
      - name: Verify API server is running
        run: |
          cd ../../
          echo "Checking API server health..."
          timeout 60s bash -c 'until curl -f http://localhost:8000/health 2>/dev/null; do sleep 2; echo "Waiting for API server..."; done'
          echo "API server is running successfully"
          
          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„ÅÆË©≥Á¥∞„ÇíÁ¢∫Ë™ç
          curl -v http://localhost:8000/health
      
      - name: Run Playwright E2E tests
        run: |
          # „ÉÜ„Çπ„ÉàÁî®„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
          export CI=true
          export ENVIRONMENT=test
          export PWTEST_SKIP_TEST_OUTPUT=1
          export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
          
          # Â≠òÂú®„Åô„Çã„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„Åø„ÇíÂÆüË°å
          pnpm exec playwright test \
            --max-failures=3 \
            --workers=1 \
            --retries=3 \
            --timeout=60000 \
            --project=api-tests \
            --project=integration-tests
      
      - name: Stop API server
        if: always()
        run: |
          cd ../../
          if [ -f api_server.pid ]; then
            echo "Stopping API server..."
            kill $(cat api_server.pid) 2>/dev/null || true
            rm -f api_server.pid
          fi
          
          # „É≠„Ç∞„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò
          if [ -f api_server.log ]; then
            echo "API server log:"
            cat api_server.log
          fi
      
      - name: Upload test results and reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: e2e-test-results-node-${{ matrix.node-version }}
          path: |
            tests/e2e/test-results/
            tests/e2e/playwright-report/
          retention-days: 14
            
      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-node-${{ matrix.node-version }}
          path: tests/e2e/playwright-report/
          retention-days: 14
      
      - name: Upload API server logs
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: api-server-logs-node-${{ matrix.node-version }}
          path: ../../api_server.log
          retention-days: 14
            
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && !cancelled()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './tests/e2e/test-results/results.json';
            
            let body = `## üé≠ Playwright E2E Test Results (Node.js ${{ matrix.node-version }})\n\n`;
            
            if (fs.existsSync(path)) {
              try {
                const results = JSON.parse(fs.readFileSync(path, 'utf8'));
                const { stats } = results;
                
                body += `- **Tests**: ${stats.total}
                - **Passed**: ${stats.passed} ‚úÖ
                - **Failed**: ${stats.failed} ‚ùå
                - **Skipped**: ${stats.skipped} ‚è≠Ô∏è
                - **Duration**: ${Math.round(stats.duration / 1000)}s
                
                ${stats.failed > 0 ? '‚ùå Some tests failed. Please check the detailed report.' : '‚úÖ All tests passed!'}`;
              } catch (error) {
                body += '‚ö†Ô∏è Could not parse test results. Check the workflow logs for details.';
              }
            } else {
              body += '‚ö†Ô∏è Test results file not found. The tests may have failed to complete.';
            }
            
            body += `\n\nüìä [View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Failed to create comment:', error);
            }